import random
from datetime import datetime, timedelta

from tortoise import Tortoise, run_async

from db.database import init_db
from db.mongo.database import init_mongo
from db.mongo.models import Word
from db.tables import Collection, User, UserWord


async def generate_mock_data():
    print("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await User.create(
        telegram_id=850472798,
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")

    # 2. –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collections = []
    for i, name in enumerate(["–û—Å–Ω–æ–≤–Ω–∞—è", "–§—Ä–∞–∑–æ–≤—ã–µ –≥–ª–∞–≥–æ–ª—ã", "IT —Ç–µ—Ä–º–∏–Ω—ã"]):
        collection = await Collection.create(
            id=i + 1,
            name=name,
            description=f"–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è {name.lower()}",
            user=user,
            is_default=(i == 0),
        )
        collections.append(collection)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection.name}")

    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ MongoDB
    english_words = [
        ("apple", "—è–±–ª–æ–∫–æ"),
        ("home", "–¥–æ–º"),
        ("good", "—Ö–æ—Ä–æ—à–æ"),
        ("run", ["–±–µ–≥–∞—Ç—å", "–∑–∞–ø—É—Å–∫–∞—Ç—å"]),
        ("database", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("algorithm", "–∞–ª–≥–æ—Ä–∏—Ç–º"),
        ("interface", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
    ]

    for word, translate in english_words:
        await Word(
            text=word,
            translate=translate,
            part_of_speech="noun" if random.random() > 0.5 else "verb",
            usage_count=random.randint(0, 100),
            transcription=word.upper(),
            synonyms=["similar"],
            antonyms=["opposite"],
            usage_exemple=f"I use {word} every day",
            audio=None,
            image=None,
        ).insert()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(english_words)} —Å–ª–æ–≤ –≤ MongoDB")

    # 4. –°–æ–∑–¥–∞–µ–º UserWords (—Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª–æ–≤–∞–º–∏)
    words = await Word.find_all().to_list()
    review_dates = [datetime.now().date() + timedelta(days=i) for i in range(5)]

    for i, word in enumerate(words):
        user_word = await UserWord.create(
            id=i + 1,
            word_text=word.text,
            user=user,
            collection=collections[i % len(collections)],
            mongo_id=str(word.id),
            review_level=random.randint(1, 5),
            next_review=random.choice(review_dates),
            associations=f"–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è {word.text}",
        )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(words)} —Å–≤—è–∑–µ–π UserWord")

    print("üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")


async def main():
    await init_db()
    await init_mongo()
    await generate_mock_data()
    await Tortoise.close_connections()


if __name__ == "__main__":
    run_async(main())
